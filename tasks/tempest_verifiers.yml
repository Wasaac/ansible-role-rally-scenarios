---

- name: "We are now configuring {{ item.key }}"
  debug:
    msg: "We are now configuring {{ item.key }}"

- name: Check existing rally verifiers
  become_user: rally
  shell: "source /home/rally/rally/bin/activate && rally deployment use {{ item.key }} &>/dev/null && rally verify list-verifiers | grep -v WARNING && deactivate"
  register: verifiers
  changed_when: False
  args:
    executable: /bin/bash

- name: Create rally verifiers
  become_user: rally
  shell: "source /home/rally/rally/bin/activate && rally deployment use {{ item.key }} &>/dev/null && rally verify create-verifier --type tempest --name {{ item.key }} --source {{ tempest_source }} --version {{ tempest_version }}  && deactivate"
  when: item.key not in verifiers.stdout | default([])
  args:
    executable: /bin/bash

- block:
  - name: Check for cirros images
    shell: "source /home/rally/rally/bin/activate && rally deployment use {{ item.key }} &>/dev/null && source ~/.rally/openrc && openstack image list --public -f value -c Name |grep cirros$ && deactivate"
    register: existing_images
    failed_when: existing_images.rc  > 1
    changed_when: False
    args:
      executable: /bin/bash

    # Can't use os_image since we need to source the rally deployment
  - name: Upload cirros image to openstack
    shell: "source /home/rally/rally/bin/activate && rally deployment use {{ item.key }} &>/dev/null && source ~/.rally/openrc && glance image-create --name cirros --visibility public --file /tmp/cirros-0.3.5-x86_64-disk.img --container-format bare --disk-format qcow2 && deactivate"
    when: existing_images.rc == 1
    args:
      executable: /bin/bash

  - name: Get image id
    shell: "source /home/rally/rally/bin/activate && rally deployment use {{ item.key }} &>/dev/null && source ~/.rally/openrc && openstack image list --public -f value -c Name -c ID | grep cirros$ | cut -f 1 -d ' ' | head -n 1 && deactivate"
    register: image_id
    changed_when: False
    args:
      executable: /bin/bash

  - name: Check for test flavor
    shell: "source /home/rally/rally/bin/activate && rally deployment use {{ item.key }} &>/dev/null && source ~/.rally/openrc && nova flavor-list  |grep {{ tempest_test_flavor }} | cut -f 2 -d  '|' | head -n 1 && deactivate"
    register: flavor_id
    changed_when: False
    args:
      executable: /bin/bash

  - name: Check for second test flavor
    shell: "source /home/rally/rally/bin/activate && rally deployment use {{ item.key }} &>/dev/null && source ~/.rally/openrc && nova flavor-list  |grep {{ tempest_second_test_flavor }} | cut -f 2 -d  '|' | head -n 1 && deactivate"
    register: second_flavor_id
    changed_when: False
    args:
      executable: /bin/bash

  - name: Set ansible facts used in tempest config
    set_fact:
      tempest_cirros_image_uuid: "{{ image_id.stdout }}"
      tempest_flavor_uuid: "{{ flavor_id.stdout }}"
      tempest_second_flavor_uuid: "{{ second_flavor_id.stdout }}"

  - name: Set tempest network name if provided
    set_fact:
      tempest_network_name: "{{ item.value.network_name }}"
    when: item.value.network_name is defined

  - name: store tempest configs in a persistent place
    file:
      state: directory
      path: /home/rally/tempest_configs
      mode: 0700
      owner: rally
      group: rally

  - name: Template in tempest config
    template: src=tempest.j2 dest=/home/rally/tempest_configs/{{ item.key }}.tempest owner=rally group=rally mode=0700
    register: reg_tempest_config

  - name: Configure rally verifier if templating in the templest config file task changed
    shell: "source /home/rally/rally/bin/activate && rally deployment use {{ item.key }} &>/dev/null && rally verify use-verifier --id {{ item.key }} &&  rally verify configure-verifier --extend /home/rally/tempest_configs/{{ item.key }}.tempest && deactivate"
    args:
      executable: /bin/bash
    when: reg_tempest_config.changed

  - name: Template in skip list
    template: src=tempest_skip_list.yml.j2 dest=/home/rally//{{ item.key }}-skip-list.yml owner=rally group=rally mode=0600

  - name: Template in tempest run bash script
    template: src=tempest_run.sh.j2 dest=/home/rally//{{ item.key }}-tempest_run.sh owner=rally group=rally mode=0700

  - name: "Configure cronjob for deployment {{ item.key }}"
    cron:
      name: "Run tempest against {{ item.key }}"
      user: rally
      hour: "{{ item.value.tempest_cron_run_hour }}"
      minute: "0"
      job: /home/rally/{{ item.key }}-tempest_run.sh --tag cron_$(date +\%Y_\%m_\%d_\%H)
    when: item.value.configure_tempest_cron | default('false')

  become_user: rally
  environment:
    ftp_proxy: ""
    http_proxy: ""
    https_proxy: ""
